<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/01/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/2023/02/02/test/</url>
    <content><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
<span id="more"></span>
<p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum</p>
<p><img src="/2023/02/02/test/avatar.jpg"></p>
<p>Here is difference.</p>
<!-- comment This is a comment. -->

<p>This is a comment.</p>
<p><font color="3333CC" size="20">Text…</font></p>
]]></content>
  </entry>
  <entry>
    <title>CMake Tools for VS Code Documentation</title>
    <url>/2023/02/02/CMake-Tools-for-VS-Code-Documentation/</url>
    <content><![CDATA[<p>CMake is an open-source, cross-platform tool that uses complier and platform independent configuration files to generate native build tool files specific to your complier and platform. And the CMake tools extension integrates VS Code and CMake to make it easier to configure, build and debug your C++ project.</p>
<span id="more"></span>

<h1 id="CMake-Tools-for-VS-Code-Documentation"><a href="#CMake-Tools-for-VS-Code-Documentation" class="headerlink" title="CMake Tools for VS Code Documentation"></a>CMake Tools for VS Code Documentation</h1><h2 id="Get-started-with-CMake-Tools-on-Linux"><a href="#Get-started-with-CMake-Tools-on-Linux" class="headerlink" title="Get started with CMake Tools on Linux"></a>Get started with CMake Tools on Linux</h2><p>CMake is an open-source, cross-platform tool that uses complier and platform independent configuration files to generate native build tool files specific to your complier and platform. And the CMake tools extension integrates VS Code and CMake to make it easier to configure, build and debug your C++ project.</p>
<ol>
<li><strong>Check your environment.</strong></li>
</ol>
<p>Although you’ll use VS Code to edit your source code, you’ll compile, debug the source code using complier and debugger, and build tools installed in your system. Check your environment to ensure your GCC, GDB and CMake installed, as well as CMake Tools on VS Code.</p>
<ol start="2">
<li><strong>Create CMakeLists.txt</strong></li>
</ol>
<p>CmakeLists.txt would tell the CMake tools how to builds your project, which contains a set of directives and instructions describing the project’s source files and targets (executable, library or both).</p>
<ol start="3">
<li><strong>Select a kit</strong></li>
</ol>
<p>Before you can access to use CMake Tools to organize your project, you have to configure the extension know about the compliers on your system. A kit represents a toolchain, which is the compiler, linker and other tools used to build your project.</p>
<ol start="4">
<li><strong>Select a variant</strong></li>
</ol>
<p>A variant contains instructions for how to build your project. By default, the CMake Tools extension provides four variants, each corresponding to a default build type: Debug, Release, MinRelSize, and RelWithDebInfor. These options do the following:</p>
<p><strong>Debug</strong>: disables optimizations and includes debug information. <strong>Release</strong>: Includes optimizations but no debug information. <strong>MinRelSize</strong>: Optimizes for size. No debug information. <strong>RelWithDebInfo</strong>: Optimizes for speed and includes debug info.</p>
<ol start="5">
<li><strong>CMake: Configure &amp; Build</strong></li>
</ol>
<p>Run the <strong>CMake: Configure</strong> command to configure your project. This generates build files in the project’s build folder using the kit and variant you selected. After configuring your project, then just click the Build button of the status bar at the right-below corner.</p>
<h2 id="The-CMake-configure-proces"><a href="#The-CMake-configure-proces" class="headerlink" title="The CMake configure proces"></a>The CMake configure proces</h2><p>In CMake, <em>Configure</em> refers to detecting requirements and generating the build files that will produce the final complicated artifacts. The following concepts will help you to understand how CMake Tools interacts with Cmake’s confugure process.</p>
<ul>
<li>The CMake Cache is a list of key-value pairs that persist between runs of the configure process.</li>
<li>Cache initializer arguments are the arguments passed to CMake that set values in the cache before any CMake scripts are run.  These allow you to control the build settings.</li>
<li>Unless overwritten or deleted, values in the CMake Cache persist between CMake runs.</li>
<li>CMake doesn’t do the build itself, it relies on build tools installed on your system. The result of a <em>configure</em> depends on the CMake Generator. The Generator tells CMake what kind of tool will be used to compile and generate the results of the build. Here are several families of generators availabel.</li>
</ul>
<table>
<thead>
<tr>
<th>Generator</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>Ninja</td>
<td>Emits files for Ninja Build Tools. This is the default generator that CMake Tools uses, unless configured otherwise.</td>
</tr>
<tr>
<td>Makefile</td>
<td>Emits a Makefile for the project that can be built via <code>make</code></td>
</tr>
<tr>
<td>Visual Studio</td>
<td>Emits visual studio solutions and project files. There are many different Visual Studio generators, so it is recommended to let CMake Tools automatically determine the appropriate generator.</td>
</tr>
</tbody></table>
<h2 id="The-Cmake-Tools-configure-step"><a href="#The-Cmake-Tools-configure-step" class="headerlink" title="The Cmake Tools configure step"></a>The Cmake Tools configure step</h2><ol>
<li>The activate kit. CMake kits provide information about toolchains available on your system that can be used with CMake to build your project.</li>
<li>Which generator to use. CMake doesn’t deal the build process itself, instead it requires specific generator (the default option is Nanja on VS Code) to do the work. </li>
<li>The configuration options.  CMake Tools has a variety of locations where configuration options can be define.</li>
<li>The configuration environment. CMake Tools sets environment variables for the child process it runs for CMake.</li>
</ol>
<h2 id="Build-with-CMake-Tools"><a href="#Build-with-CMake-Tools" class="headerlink" title="Build with CMake Tools"></a>Build with CMake Tools</h2><p>Once you have configured your project, then you can start to run a CMake build. Most of your time with CMake Tools will be spend in the process of configuring the build. You can just click the <code>build</code> button in the VS Code status bar. Starting a new build while an existing build is running will cancel the current build and start a new one.</p>
<h3 id="Build-the-target"><a href="#Build-the-target" class="headerlink" title="Build the target"></a>Build the target</h3><p>CMake Tools persists a “default target” for the build process. The default target is the “all” target, which builds all of the targets that CMake has designated for a default build.</p>
<p><img src="https://github.com/microsoft/vscode-cmake-tools/raw/main/docs/images/default_target.png" alt="Default target as shown in the status bar"></p>
<p>Also, you can build a single target without changing the current build target from the VS Code by running the <code>CMake: Build a target</code> command. CMake will build any dependent targets, even if they aren’t directly selected.</p>
]]></content>
      <tags>
        <tag>CMake</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda Instructions</title>
    <url>/2023/02/02/Anaconda-Instructions/</url>
    <content><![CDATA[<p>Conda is an open-source package and environment management system that runs on Windows, macOS, and Linux. Conda quickly installs, runs, and updates packages and their dependencies. It also easily creates, saves, loads, and switches between environments on your local computer. It was created for Python programs, but it can package and distribute software for any language.</p>
<span id="more"></span>

<h1 id="Anaconda-Instructions"><a href="#Anaconda-Instructions" class="headerlink" title="Anaconda Instructions"></a>Anaconda Instructions</h1><h2 id="Configure-your-environment-with-‘conda’"><a href="#Configure-your-environment-with-‘conda’" class="headerlink" title="Configure your environment with ‘conda’"></a>Configure your environment with ‘conda’</h2><h3 id="Create-a-new-environment"><a href="#Create-a-new-environment" class="headerlink" title="Create a new environment"></a>Create a new environment</h3><ol>
<li>Create an environment without additional packages.</li>
</ol>
<pre><code class="bash">conda create -n &lt;env_name&gt;
</code></pre>
<ol start="2">
<li>An environment with additional packages.</li>
</ol>
<pre><code class="bash">conda create -n &lt;env_name&gt; &lt;package_1&gt; &lt;package_2&gt;
</code></pre>
<h3 id="Activate-x2F-Deactivate-the-new-environment"><a href="#Activate-x2F-Deactivate-the-new-environment" class="headerlink" title="Activate&#x2F;Deactivate the new environment"></a>Activate&#x2F;Deactivate the new environment</h3><ol>
<li>Activate</li>
</ol>
<pre><code class="bash">conda activate &lt;env_name&gt;
</code></pre>
<ol start="2">
<li>Install many packages with a single line</li>
</ol>
<pre><code class="bash">conda install &lt;package_1&gt; &lt;package_2&gt; &lt;package_3&gt; ...
</code></pre>
<ol start="2">
<li>Deactivate</li>
</ol>
<pre><code class="bash">conda deactivate
</code></pre>
<h2 id="View-information"><a href="#View-information" class="headerlink" title="View information"></a>View information</h2><ol>
<li>Show environments information</li>
</ol>
<pre><code class="bash">conda env list
</code></pre>
<ol start="2">
<li>Show a list of packages in the environment</li>
</ol>
<pre><code>conda list
</code></pre>
<h2 id="Rename-a-environment"><a href="#Rename-a-environment" class="headerlink" title="Rename a environment"></a>Rename a environment</h2><ol>
<li>Clone the old environment</li>
</ol>
<pre><code class="bash">conda create -n &lt;new_env&gt; --clone &lt;old_env&gt;
</code></pre>
<ol start="2">
<li>Remove the old environment</li>
</ol>
<pre><code class="bash">conda remove -n &lt;old_name&gt; --all
</code></pre>
<h2 id="Share-environment"><a href="#Share-environment" class="headerlink" title="Share environment"></a>Share environment</h2><ol>
<li>Export existent environment</li>
</ol>
<pre><code class="bash">conda env export &gt; &lt;default.yml&gt;
</code></pre>
<ol start="2">
<li>Recreate a new environment</li>
</ol>
<pre><code class="bash">conda env create -f &lt;default.yml&gt; -n &lt;env_name&gt;
</code></pre>
]]></content>
      <tags>
        <tag>Anaconda</tag>
      </tags>
  </entry>
</search>
